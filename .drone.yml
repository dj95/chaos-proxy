kind: pipeline
name: testing

steps:
- name: unittests
  image: golang
  commands:
  # enable go modules
  - export GO111MODULE=on
  - mkdir -p report
  # run tests
  - go test -covermode=count -coverprofile=report/cover.out ./...

- name: coverage
  image: plugins/codecov
  depends_on:
  - unittests 
  settings:
    token:
      from_secret: CODECOV_TOKEN
    paths:
    - report/
    files:
    - "*.out"

- name: lint
  image: golang
  commands:
  - go get -u golang.org/x/lint/golint
  # enable go modules
  - export GO111MODULE=on
  # run tests
  - golint -set_exit_status ./...

- name: staticcheck
  image: golang
  depends_on:
  - lint
  commands:
  - go get -u honnef.co/go/tools/cmd/staticcheck
  # enable go modules
  - export GO111MODULE=on
  # run tests
  - staticcheck ./...

- name: sonarqube
  image: aosapps/drone-sonar-plugin
  depends_on:
  - unittests 
  settings:
    sonar_host:
      from_secret: sonar_host
    sonar_token:
      from_secret: sonar_token

- name: fuzzit
  image: golang
  depends_on:
  - unittests 
  environment:
    FUZZIT_API_KEY:
      from_secret: FUZZIT_API_KEY
  commands:
  # go to the GOROOT
  - cd /go/src 
  # install the fuzz builder
  - go get -u github.com/fuzzitdev/example-go github.com/dvyukov/go-fuzz/go-fuzz-build
  # go back to the project
  - cd $DRONE_WORKSPACE
  # build the project for fuzzit
  - go-fuzz-build -o chaos-proxy-fuzzer.zip
  - | # download the fuzzer
      wget -q -O fuzzit \
      https://github.com/fuzzitdev/fuzzit/releases/latest/download/fuzzit_Linux_x86_64
  # make the binary executable
  - chmod a+x fuzzit
  # create a fuzzing target if it does not exist
  - ./fuzzit create target --skip-if-exists chaos-proxy-go
  - | # create a fuzzing job for this project
      ./fuzzit create job \
        --engine go-fuzz \
        --type fuzzing dj95-gh/chaos-proxy-go
        ./chaos-proxy-fuzzer.zip
